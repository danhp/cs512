// -------------------------------// Kevin T. Manley// CSE 593// -------------------------------package middleware;import server.RMHashtable;import server.ReservedItem;import java.util.*;public class Customer {    private int m_nID;    private middleware.RMHashtable m_Reservations;    Customer(int customerId) {        super();        m_nID = customerId;        m_Reservations = new middleware.RMHashtable();    }    public void setId(int customerId) {         m_nID = customerId;     }    public int getId() {         return m_nID;     }    public void reserve(String key, String location, int price) {        middleware.ReservedItem reservedItem = getReservedItem(key, location);        if (reservedItem == null) {            // Customer doesn't already have a reservation for this resource,             // so create a new one now.            reservedItem = new middleware.ReservedItem(key, location, 1, price);        } else {            reservedItem.setCount(reservedItem.getCount() + 1);            // Note: latest price overrides existing price.            reservedItem.setPrice(price);        }        m_Reservations.put(reservedItem.getKey(), reservedItem);    }    public middleware.ReservedItem getReservedItem(String key, String location) {        middleware.ReservedItem reservedItem = (middleware.ReservedItem) m_Reservations.get(middleware.ReservedItem.getKey(key, location));        return reservedItem;    }    public String printBill() {        String s = "Bill for customer " + m_nID + " { \n";        Object key = null;        for (Enumeration e = m_Reservations.keys(); e.hasMoreElements();) {            key = e.nextElement();            middleware.ReservedItem item = (middleware.ReservedItem) m_Reservations.get(key);            int type = Integer.valueOf(item.getReservableItemKey());            s = s + "\t" + item.getCount() + " " + (type == 0 ? "car" : (type == 1 ? "flight" : "room")) + (item.getCount() > 1 ? "s" : "")                    + " for $" + item.getPrice() + " at " + item.getLocation() + "\n";        }        s = s + "}";        return s;    }    public String toString() {         return "Customer key = " + getKey() + ", id = " + getId() + ", "                 + "reservations: \n" + m_Reservations.toString() + "\n";    }    public static String getKey(int customerId) {        String s = "customer-" + customerId;        return s.toLowerCase();    }    public String getKey() {        return Customer.getKey(getId());    }    public middleware.RMHashtable getReservations() {        try {            return (middleware.RMHashtable) m_Reservations;        } catch (Exception e) {            return null;        }    }}